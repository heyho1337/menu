{% extends '@EasyAdmin/crud/index.html.twig' %}
{% import _self as macros %}

{# Macro to render a single menu item as a <li> with nested children if any #}
{% macro renderMenuTree(menuData, menusById, batch_actions, sort_field_name, ea) %}
    <li data-id="{{ menuData.entity.id }}" data-sortable-update-url="{{ path('menu_order', {id: menuData.entity.id }) }}">
        <div class="menu-item">
            {% for field in menuData.dto.fields %}
                {% set is_searchable = (ea.crud.searchFields is null) or (field.property in ea.crud.searchFields) %}
                <span
                    data-column="{{ field.property }}"
                    data-label="{{ field.label|trans|e('html') }}"
                    class="{{ is_searchable ? 'searchable' }} {{ field.property == sort_field_name ? 'sorted' }} text-{{ field.textAlign }} {{ field.cssClass }}"
                    dir="{{ ea.i18n.textDirection }}"
                    {% for name, value in field.htmlAttributes %}{{ name }}="{{ value|e('html_attr') }}" {% endfor %}
                >
                    {{ include(field.templatePath, { field: field, entity: menuData.dto }, with_context = false) }}
                </span>
            {% endfor %}


            {# Delete icon/link #}
            <a href="#" 
                class="menu-delete-icon"
                title="{{ 'Delete'|trans }}"
                data-action="delete"
                data-delete-url="{{ ea_url()
                    .setController(ea.crud.controllerFqcn)
                    .setAction('delete')
                    .setEntityId(menuData.dto.primaryKeyValue)
                    .generateUrl() }}"
                onclick="
                    if(confirm('{{ 'Are you sure you want to delete this item?'|trans }}')){
                        const form = document.getElementById('delete-form');
                        form.setAttribute('action', this.getAttribute('data-delete-url'));
                        form.submit();
                    }
                    return false;
                "
            >
                üóëÔ∏è
            </a>
        </div>
        {% set children = [] %}
        {% for childData in menusById %}
            {% if childData.entity.getParent() and childData.entity.getParent().id == menuData.entity.id %}
                {% set children = children | merge([childData]) %}
            {% endif %}
        {% endfor %}
        {% if children|length > 0 %}
            <ul data-sortable="true">
                {% for child in children %}
                    {{ _self.renderMenuTree(child, menusById, batch_actions, sort_field_name, ea) }}
                {% endfor %}
            </ul>
        {% endif %}
    </li>
{% endmacro %}

{# Macro to render header as a <ul><li> list #}
{% macro renderHeader(fields, batch_actions) %}
    <ul class="menu-header">
        <li class="menu-header-item">
            {% if batch_actions|length > 0 %}
                <span class="checkbox-col"></span>
            {% endif %}
            {% for field in fields %}
                <span class="header-field">{{ field.label|trans }}</span>
            {% endfor %}
        </li>
    </ul>
{% endmacro %}

{% block table_head %}
{% endblock %}

{# block to render header and the nested menu tree as UL/LI #}
{% block table_body %}
    {# Render header as UL/LI #}
    {{ macros.renderHeader(entities|first.fields, batch_actions) }}

    {# Render nested menu tree below header #}
    <div data-controller="admin--menu-sortable" 
         data-admin--menu-sortable-resource-name-value="menu" 
         data-admin--menu-sortable-param-name-value="order_num" 
         class="menu-tree">
        {# Step 1: Flatten all menus #}
        {% set menusById = {} %}
        {% for entityDto in entities %}
            {% set menu = entityDto.getInstance() %}
            {% set menusById = menusById | merge({ (menu.id): { 'dto': entityDto, 'entity': menu } }) %}
        {% endfor %}

        {# Step 2: Group all menus by their position key #}
        {% set menusByPosition = {} %}
        {% for id, menuData in menusById %}
            {% set posKey = menuData.entity.position ? menuData.entity.position.__toString() : 'No Position' %}
            {% set current = menusByPosition[posKey]|default([]) %}
            {% set menusByPosition = menusByPosition | merge({ (posKey) : current | merge([menuData]) }) %}
        {% endfor %}

        {# Step 3: For each position group, render by root menus (no parent or different position) #}
        {% for positionKey, menusInPosition in menusByPosition|sort %}
            <div class="menu-position-group">
                <h4 class="menu-position-header">{{ positionKey }}</h4>
                <ul data-sortable="true">
                    {% for menuData in menusInPosition %}
                        {% set parent = menuData.entity.getParent() %}
                        {% set parentPosition = parent and parent.position ? parent.position.__toString() : 'No Position' %}
                        {% if not parent or parentPosition != positionKey %}
                            {{ macros.renderMenuTree(menuData, menusInPosition, batch_actions, sort_field_name, ea) }}
                        {% endif %}
                    {% endfor %}
                </ul>
            </div>
        {% endfor %}
    </div>
{% endblock %}
